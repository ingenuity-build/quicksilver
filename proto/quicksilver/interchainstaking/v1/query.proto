syntax = "proto3";
package quicksilver.interchainstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "quicksilver/interchainstaking/v1/genesis.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/interchainstaking/types";

// Query defines the gRPC querier service.
service Query {
  // RegisteredZoneInfos provides meta data on connected zones.
  rpc RegisteredZoneInfos(QueryRegisteredZonesInfoRequest)
      returns (QueryRegisteredZonesInfoResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones";
  }
  // DepositAccountFromAddress provides data on the deposit address for a
  // connected zone.
  rpc DepositAccountFromAddress(QueryDepositAccountForChainRequest)
      returns (QueryDepositAccountForChainResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/deposit_address";
  }
  // DelegatorIntent provides data on the intent of the delegator for the given
  // zone.
  rpc DelegatorIntent(QueryDelegatorIntentRequest)
      returns (QueryDelegatorIntentResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/delegator_intent";
  }
}

message QueryRegisteredZonesInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryRegisteredZonesInfoResponse {
  repeated RegisteredZone zones = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDepositAccountForChainRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
}

// QueryDepositAccountForChainResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainResponse {
  string deposit_account_address = 1
      [ (gogoproto.moretags) = "yaml:\"deposit_account_address\"" ];
}

message QueryDelegatorIntentRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  string from_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryDelegatorIntentResponse { DelegatorIntent intent = 1; }
